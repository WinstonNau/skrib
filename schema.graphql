# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with a globally unique `ID`."
interface Node {
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
}

"The output of our create `Game` mutation."
type CreateGamePayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "The `Game` that was created by this mutation."
    game: Game
    "An edge for our `Game`. May be used by Relay 1."
    gameEdge(
        "The method to use when ordering `Game`."
        orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamesEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our create `GamePlayer` mutation."
type CreateGamePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "Reads a single `Game` that is related to this `GamePlayer`."
    gameByGameId: Game
    "The `GamePlayer` that was created by this mutation."
    gamePlayer: GamePlayer
    "An edge for our `GamePlayer`. May be used by Relay 1."
    gamePlayerEdge(
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersEdge
    "Reads a single `Player` that is related to this `GamePlayer`."
    playerByPlayerId: Player
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our create `Player` mutation."
type CreatePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "The `Player` that was created by this mutation."
    player: Player
    "An edge for our `Player`. May be used by Relay 1."
    playerEdge(
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our `currentPlayer` mutation."
type CurrentPlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    player: Player
    "An edge for our `Player`. May be used by Relay 1."
    playerEdge(
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our delete `Game` mutation."
type DeleteGamePayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    deletedGameId: ID
    "The `Game` that was deleted by this mutation."
    game: Game
    "An edge for our `Game`. May be used by Relay 1."
    gameEdge(
        "The method to use when ordering `Game`."
        orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamesEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our delete `GamePlayer` mutation."
type DeleteGamePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    deletedGamePlayerId: ID
    "Reads a single `Game` that is related to this `GamePlayer`."
    gameByGameId: Game
    "The `GamePlayer` that was deleted by this mutation."
    gamePlayer: GamePlayer
    "An edge for our `GamePlayer`. May be used by Relay 1."
    gamePlayerEdge(
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersEdge
    "Reads a single `Player` that is related to this `GamePlayer`."
    playerByPlayerId: Player
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our delete `Player` mutation."
type DeletePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    deletedPlayerId: ID
    "The `Player` that was deleted by this mutation."
    player: Player
    "An edge for our `Player`. May be used by Relay 1."
    playerEdge(
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

type Game implements Node {
    createdAt: Datetime!
    durationPerWord: Interval
    "Reads and enables pagination through a set of `GamePlayer`."
    gamePlayersByGameId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A condition to be used in determining which values should be returned by the collection."
        condition: GamePlayerCondition,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`."
        offset: Int,
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersConnection!
    id: UUID!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    roundNum: Int!
    status: GameStatus!
    updatedAt: Datetime!
}

type GamePlayer implements Node {
    createdAt: Datetime!
    "Reads a single `Game` that is related to this `GamePlayer`."
    gameByGameId: Game
    gameId: UUID!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    "Reads a single `Player` that is related to this `GamePlayer`."
    playerByPlayerId: Player
    playerId: UUID!
    score: Int!
    updatedAt: Datetime!
}

"A connection to a list of `GamePlayer` values."
type GamePlayersConnection {
    "A list of edges which contains the `GamePlayer` and cursor to aid in pagination."
    edges: [GamePlayersEdge!]!
    "A list of `GamePlayer` objects."
    nodes: [GamePlayer]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `GamePlayer` you could get from the connection."
    totalCount: Int!
}

"A `GamePlayer` edge in the connection."
type GamePlayersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `GamePlayer` at the end of the edge."
    node: GamePlayer
}

"A connection to a list of `Game` values."
type GamesConnection {
    "A list of edges which contains the `Game` and cursor to aid in pagination."
    edges: [GamesEdge!]!
    "A list of `Game` objects."
    nodes: [Game]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Game` you could get from the connection."
    totalCount: Int!
}

"A `Game` edge in the connection."
type GamesEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Game` at the end of the edge."
    node: Game
}

"An interval of time that has passed where the smallest distinct unit is a second."
type Interval {
    "A quantity of days."
    days: Int
    "A quantity of hours."
    hours: Int
    "A quantity of minutes."
    minutes: Int
    "A quantity of months."
    months: Int
    "A quantity of seconds. This is the only non-integer field, as all the other fields will dump their overflow into a smaller unit of time. Intervals don’t have a smaller unit than seconds."
    seconds: Float
    "A quantity of years."
    years: Int
}

"The output of our `joinGame` mutation."
type JoinGamePayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    game: Game
    "An edge for our `Game`. May be used by Relay 1."
    gameEdge(
        "The method to use when ordering `Game`."
        orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamesEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The root mutation type which contains root level fields which mutate data."
type Mutation {
    "Creates a single `Game`."
    createGame(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: CreateGameInput!
    ): CreateGamePayload
    "Creates a single `GamePlayer`."
    createGamePlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: CreateGamePlayerInput!
    ): CreateGamePlayerPayload
    "Creates a single `Player`."
    createPlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: CreatePlayerInput!
    ): CreatePlayerPayload
    "Get current logged in player"
    currentPlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: CurrentPlayerInput!
    ): CurrentPlayerPayload
    "Deletes a single `Game` using its globally unique id."
    deleteGame(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeleteGameInput!
    ): DeleteGamePayload
    "Deletes a single `Game` using a unique key."
    deleteGameById(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeleteGameByIdInput!
    ): DeleteGamePayload
    "Deletes a single `GamePlayer` using its globally unique id."
    deleteGamePlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeleteGamePlayerInput!
    ): DeleteGamePlayerPayload
    "Deletes a single `GamePlayer` using a unique key."
    deleteGamePlayerByGameIdAndPlayerId(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeleteGamePlayerByGameIdAndPlayerIdInput!
    ): DeleteGamePlayerPayload
    "Deletes a single `Player` using its globally unique id."
    deletePlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeletePlayerInput!
    ): DeletePlayerPayload
    "Deletes a single `Player` using a unique key."
    deletePlayerByDisplayName(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeletePlayerByDisplayNameInput!
    ): DeletePlayerPayload
    "Deletes a single `Player` using a unique key."
    deletePlayerByFirebaseUid(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeletePlayerByFirebaseUidInput!
    ): DeletePlayerPayload
    "Deletes a single `Player` using a unique key."
    deletePlayerById(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: DeletePlayerByIdInput!
    ): DeletePlayerPayload
    "Player joins a game room"
    joinGame(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: JoinGameInput!
    ): JoinGamePayload
    "Registers a single user from firebase_uid"
    registerPlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: RegisterPlayerInput!
    ): RegisterPlayerPayload
    "Updates a single `Game` using its globally unique id and a patch."
    updateGame(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdateGameInput!
    ): UpdateGamePayload
    "Updates a single `Game` using a unique key and a patch."
    updateGameById(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdateGameByIdInput!
    ): UpdateGamePayload
    "Updates a single `GamePlayer` using its globally unique id and a patch."
    updateGamePlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdateGamePlayerInput!
    ): UpdateGamePlayerPayload
    "Updates a single `GamePlayer` using a unique key and a patch."
    updateGamePlayerByGameIdAndPlayerId(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdateGamePlayerByGameIdAndPlayerIdInput!
    ): UpdateGamePlayerPayload
    "Updates a single `Player` using its globally unique id and a patch."
    updatePlayer(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdatePlayerInput!
    ): UpdatePlayerPayload
    "Updates a single `Player` using a unique key and a patch."
    updatePlayerByDisplayName(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdatePlayerByDisplayNameInput!
    ): UpdatePlayerPayload
    "Updates a single `Player` using a unique key and a patch."
    updatePlayerByFirebaseUid(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdatePlayerByFirebaseUidInput!
    ): UpdatePlayerPayload
    "Updates a single `Player` using a unique key and a patch."
    updatePlayerById(
        "The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields."
        input: UpdatePlayerByIdInput!
    ): UpdatePlayerPayload
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: Cursor
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: Cursor
}

type Player implements Node {
    createdAt: Datetime!
    displayName: String!
    firebaseUid: String!
    "Reads and enables pagination through a set of `GamePlayer`."
    gamePlayersByPlayerId(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A condition to be used in determining which values should be returned by the collection."
        condition: GamePlayerCondition,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`."
        offset: Int,
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersConnection!
    id: UUID!
    "A globally unique identifier. Can be used in various places throughout the system to identify this single value."
    nodeId: ID!
    updatedAt: Datetime!
}

"A connection to a list of `Player` values."
type PlayersConnection {
    "A list of edges which contains the `Player` and cursor to aid in pagination."
    edges: [PlayersEdge!]!
    "A list of `Player` objects."
    nodes: [Player]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
    "The count of *all* `Player` you could get from the connection."
    totalCount: Int!
}

"A `Player` edge in the connection."
type PlayersEdge {
    "A cursor for use in pagination."
    cursor: Cursor
    "The `Player` at the end of the edge."
    node: Player
}

"The root query type which gives access points into the data universe."
type Query implements Node {
    "Reads and enables pagination through a set of `GamePlayer`."
    allGamePlayers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A condition to be used in determining which values should be returned by the collection."
        condition: GamePlayerCondition,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`."
        offset: Int,
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersConnection
    "Reads and enables pagination through a set of `Game`."
    allGames(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A condition to be used in determining which values should be returned by the collection."
        condition: GameCondition,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`."
        offset: Int,
        "The method to use when ordering `Game`."
        orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamesConnection
    "Reads and enables pagination through a set of `Player`."
    allPlayers(
        "Read all values in the set after (below) this cursor."
        after: Cursor,
        "Read all values in the set before (above) this cursor."
        before: Cursor,
        "A condition to be used in determining which values should be returned by the collection."
        condition: PlayerCondition,
        "Only read the first `n` values of the set."
        first: Int,
        "Only read the last `n` values of the set."
        last: Int,
        "Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`."
        offset: Int,
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersConnection
    "Reads a single `Game` using its globally unique `ID`."
    game(
        "The globally unique `ID` to be used in selecting a single `Game`."
        nodeId: ID!
    ): Game
    gameById(id: UUID!): Game
    "Reads a single `GamePlayer` using its globally unique `ID`."
    gamePlayer(
        "The globally unique `ID` to be used in selecting a single `GamePlayer`."
        nodeId: ID!
    ): GamePlayer
    gamePlayerByGameIdAndPlayerId(gameId: UUID!, playerId: UUID!): GamePlayer
    "Fetches an object given its globally unique `ID`."
    node(
        "The globally unique `ID`."
        nodeId: ID!
    ): Node
    "The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`."
    nodeId: ID!
    "Reads a single `Player` using its globally unique `ID`."
    player(
        "The globally unique `ID` to be used in selecting a single `Player`."
        nodeId: ID!
    ): Player
    playerByDisplayName(displayName: String!): Player
    playerByFirebaseUid(firebaseUid: String!): Player
    playerById(id: UUID!): Player
    "Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form."
    query: Query!
}

"The output of our `registerPlayer` mutation."
type RegisterPlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    player: Player
    "An edge for our `Player`. May be used by Relay 1."
    playerEdge(
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our update `Game` mutation."
type UpdateGamePayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "The `Game` that was updated by this mutation."
    game: Game
    "An edge for our `Game`. May be used by Relay 1."
    gameEdge(
        "The method to use when ordering `Game`."
        orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamesEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our update `GamePlayer` mutation."
type UpdateGamePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "Reads a single `Game` that is related to this `GamePlayer`."
    gameByGameId: Game
    "The `GamePlayer` that was updated by this mutation."
    gamePlayer: GamePlayer
    "An edge for our `GamePlayer`. May be used by Relay 1."
    gamePlayerEdge(
        "The method to use when ordering `GamePlayer`."
        orderBy: [GamePlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): GamePlayersEdge
    "Reads a single `Player` that is related to this `GamePlayer`."
    playerByPlayerId: Player
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"The output of our update `Player` mutation."
type UpdatePlayerPayload {
    "The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations."
    clientMutationId: String
    "The `Player` that was updated by this mutation."
    player: Player
    "An edge for our `Player`. May be used by Relay 1."
    playerEdge(
        "The method to use when ordering `Player`."
        orderBy: [PlayersOrderBy!] = [PRIMARY_KEY_ASC]
    ): PlayersEdge
    "Our root query field type. Allows us to run any query from our mutation payload."
    query: Query
}

"Methods to use when ordering `GamePlayer`."
enum GamePlayersOrderBy {
    CREATED_AT_ASC
    CREATED_AT_DESC
    GAME_ID_ASC
    GAME_ID_DESC
    NATURAL
    PLAYER_ID_ASC
    PLAYER_ID_DESC
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    SCORE_ASC
    SCORE_DESC
    UPDATED_AT_ASC
    UPDATED_AT_DESC
}

enum GameStatus {
    ENDED
    STARTED
    WAITING
}

"Methods to use when ordering `Game`."
enum GamesOrderBy {
    CREATED_AT_ASC
    CREATED_AT_DESC
    DURATION_PER_WORD_ASC
    DURATION_PER_WORD_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    ROUND_NUM_ASC
    ROUND_NUM_DESC
    STATUS_ASC
    STATUS_DESC
    UPDATED_AT_ASC
    UPDATED_AT_DESC
}

"Methods to use when ordering `Player`."
enum PlayersOrderBy {
    CREATED_AT_ASC
    CREATED_AT_DESC
    DISPLAY_NAME_ASC
    DISPLAY_NAME_DESC
    FIREBASE_UID_ASC
    FIREBASE_UID_DESC
    ID_ASC
    ID_DESC
    NATURAL
    PRIMARY_KEY_ASC
    PRIMARY_KEY_DESC
    UPDATED_AT_ASC
    UPDATED_AT_DESC
}

"All input for the create `Game` mutation."
input CreateGameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The `Game` to be created by this mutation."
    game: GameInput!
}

"All input for the create `GamePlayer` mutation."
input CreateGamePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The `GamePlayer` to be created by this mutation."
    gamePlayer: GamePlayerInput!
}

"All input for the create `Player` mutation."
input CreatePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The `Player` to be created by this mutation."
    player: PlayerInput!
}

"All input for the `currentPlayer` mutation."
input CurrentPlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
}

"All input for the `deleteGameById` mutation."
input DeleteGameByIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    id: UUID!
}

"All input for the `deleteGame` mutation."
input DeleteGameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The globally unique `ID` which will identify a single `Game` to be deleted."
    nodeId: ID!
}

"All input for the `deleteGamePlayerByGameIdAndPlayerId` mutation."
input DeleteGamePlayerByGameIdAndPlayerIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    gameId: UUID!
    playerId: UUID!
}

"All input for the `deleteGamePlayer` mutation."
input DeleteGamePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The globally unique `ID` which will identify a single `GamePlayer` to be deleted."
    nodeId: ID!
}

"All input for the `deletePlayerByDisplayName` mutation."
input DeletePlayerByDisplayNameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    displayName: String!
}

"All input for the `deletePlayerByFirebaseUid` mutation."
input DeletePlayerByFirebaseUidInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    firebaseUid: String!
}

"All input for the `deletePlayerById` mutation."
input DeletePlayerByIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    id: UUID!
}

"All input for the `deletePlayer` mutation."
input DeletePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The globally unique `ID` which will identify a single `Player` to be deleted."
    nodeId: ID!
}

"A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’"
input GameCondition {
    "Checks for equality with the object’s `createdAt` field."
    createdAt: Datetime
    "Checks for equality with the object’s `durationPerWord` field."
    durationPerWord: IntervalInput
    "Checks for equality with the object’s `id` field."
    id: UUID
    "Checks for equality with the object’s `roundNum` field."
    roundNum: Int
    "Checks for equality with the object’s `status` field."
    status: GameStatus
    "Checks for equality with the object’s `updatedAt` field."
    updatedAt: Datetime
}

"An input for mutations affecting `Game`"
input GameInput {
    createdAt: Datetime
    durationPerWord: IntervalInput
    id: UUID
    roundNum: Int
    status: GameStatus
    updatedAt: Datetime
}

"Represents an update to a `Game`. Fields that are set will be updated."
input GamePatch {
    createdAt: Datetime
    durationPerWord: IntervalInput
    id: UUID
    roundNum: Int
    status: GameStatus
    updatedAt: Datetime
}

"A condition to be used against `GamePlayer` object types. All fields are tested for equality and combined with a logical ‘and.’"
input GamePlayerCondition {
    "Checks for equality with the object’s `createdAt` field."
    createdAt: Datetime
    "Checks for equality with the object’s `gameId` field."
    gameId: UUID
    "Checks for equality with the object’s `playerId` field."
    playerId: UUID
    "Checks for equality with the object’s `score` field."
    score: Int
    "Checks for equality with the object’s `updatedAt` field."
    updatedAt: Datetime
}

"An input for mutations affecting `GamePlayer`"
input GamePlayerInput {
    createdAt: Datetime
    gameId: UUID!
    playerId: UUID!
    score: Int
    updatedAt: Datetime
}

"Represents an update to a `GamePlayer`. Fields that are set will be updated."
input GamePlayerPatch {
    createdAt: Datetime
    gameId: UUID
    playerId: UUID
    score: Int
    updatedAt: Datetime
}

"An interval of time that has passed where the smallest distinct unit is a second."
input IntervalInput {
    "A quantity of days."
    days: Int
    "A quantity of hours."
    hours: Int
    "A quantity of minutes."
    minutes: Int
    "A quantity of months."
    months: Int
    "A quantity of seconds. This is the only non-integer field, as all the other fields will dump their overflow into a smaller unit of time. Intervals don’t have a smaller unit than seconds."
    seconds: Float
    "A quantity of years."
    years: Int
}

"All input for the `joinGame` mutation."
input JoinGameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    gameId: UUID
}

"A condition to be used against `Player` object types. All fields are tested for equality and combined with a logical ‘and.’"
input PlayerCondition {
    "Checks for equality with the object’s `createdAt` field."
    createdAt: Datetime
    "Checks for equality with the object’s `displayName` field."
    displayName: String
    "Checks for equality with the object’s `firebaseUid` field."
    firebaseUid: String
    "Checks for equality with the object’s `id` field."
    id: UUID
    "Checks for equality with the object’s `updatedAt` field."
    updatedAt: Datetime
}

"An input for mutations affecting `Player`"
input PlayerInput {
    createdAt: Datetime
    displayName: String!
    firebaseUid: String!
    id: UUID
    updatedAt: Datetime
}

"Represents an update to a `Player`. Fields that are set will be updated."
input PlayerPatch {
    createdAt: Datetime
    displayName: String
    firebaseUid: String
    id: UUID
    updatedAt: Datetime
}

"All input for the `registerPlayer` mutation."
input RegisterPlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    displayName: String!
}

"All input for the `updateGameById` mutation."
input UpdateGameByIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "An object where the defined keys will be set on the `Game` being updated."
    gamePatch: GamePatch!
    id: UUID!
}

"All input for the `updateGame` mutation."
input UpdateGameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "An object where the defined keys will be set on the `Game` being updated."
    gamePatch: GamePatch!
    "The globally unique `ID` which will identify a single `Game` to be updated."
    nodeId: ID!
}

"All input for the `updateGamePlayerByGameIdAndPlayerId` mutation."
input UpdateGamePlayerByGameIdAndPlayerIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    gameId: UUID!
    "An object where the defined keys will be set on the `GamePlayer` being updated."
    gamePlayerPatch: GamePlayerPatch!
    playerId: UUID!
}

"All input for the `updateGamePlayer` mutation."
input UpdateGamePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "An object where the defined keys will be set on the `GamePlayer` being updated."
    gamePlayerPatch: GamePlayerPatch!
    "The globally unique `ID` which will identify a single `GamePlayer` to be updated."
    nodeId: ID!
}

"All input for the `updatePlayerByDisplayName` mutation."
input UpdatePlayerByDisplayNameInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    displayName: String!
    "An object where the defined keys will be set on the `Player` being updated."
    playerPatch: PlayerPatch!
}

"All input for the `updatePlayerByFirebaseUid` mutation."
input UpdatePlayerByFirebaseUidInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    firebaseUid: String!
    "An object where the defined keys will be set on the `Player` being updated."
    playerPatch: PlayerPatch!
}

"All input for the `updatePlayerById` mutation."
input UpdatePlayerByIdInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    id: UUID!
    "An object where the defined keys will be set on the `Player` being updated."
    playerPatch: PlayerPatch!
}

"All input for the `updatePlayer` mutation."
input UpdatePlayerInput {
    "An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client."
    clientMutationId: String
    "The globally unique `ID` which will identify a single `Player` to be updated."
    nodeId: ID!
    "An object where the defined keys will be set on the `Player` being updated."
    playerPatch: PlayerPatch!
}


"A location in a connection that can be used for resuming pagination."
scalar Cursor

"A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122)."
scalar UUID

"A point in time as described by the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone."
scalar Datetime
